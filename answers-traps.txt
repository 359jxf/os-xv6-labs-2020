1. 在命令行输入`make fs.img`编译user/call.c，在`user/call.asm`中查看可读的汇编版本。
2. 哪些寄存器保存函数的参数？例如，在`main`对`printf`的调用中，哪个寄存器保存13？

答：如表所示，a0到a7存放函数参数；

![image-20240810191348440](image-20240810191348440.png)

查看汇编代码，a2寄存器保存了13.

![image-20240810191639672](D:\os课设\LAB4\image-20240810191639672.png)

3. `main`的汇编代码中对函数`f`的调用在哪里？对`g`的调用在哪里(提示：编译器可能会将函数内联）

答：从代码上看只调用了malloc、printf、exit函数，没有这样的代码。 g 被内联inline到 f(x) 中，然后 f 又被进一步内联到 main 中。

4. `printf`函数位于哪个地址？

答：在0x0000000000000630, main 中使用 pc 相对寻址来计算得到这个地址。

```asm
  34:	600080e7          	jalr	1536(ra) # 630 <printf>
```

![image-20240810194137934](image-20240810194137934.png)

5. 在`main`中`printf`的`jalr`之后的寄存器`ra`中有什么值？

答：0x0000000000000038, jalr 指令的下一条汇编指令的地址。ra是return address的意思，函数执行完后会回到ra寄存器的值所在的位置继续执行。首先pc+4存到ra里，然后这里1536(ra)是让ra寄存器里的值加上1536，得到630的地址。即执行prinf函数。执行完后pc指向下一条汇编指令的地址。

```asm
  34:	600080e7          	jalr	1536(ra) # 630 <printf>
  38:	4501                	li	a0,0
```

6. 运行以下代码。程序的输出是什么？如果RISC-V是大端存储，为了得到相同的输出，你会把`i`设置成什么？是否需要将`57616`更改为其他值？

```c
unsigned int i = 0x00646c72;
printf("H%x Wo%s", 57616, &i);
```

答：输出如下

![image-20240810201023017](image-20240810201023017.png)

由于提示这是将字节映射到字符的[ASCII码表](http://web.cs.mun.ca/~michael/c/ascii-table.html)，考虑到57616的十六进制为E110，所以输出HE110；而i = 0x00646c72可以拆分为0x64,0x6c,0x72，对应字符为dlr，而RISC-V是小端存储（低位字节在低地址），所以打印出来就是rld即world。

 如果RISC-V是大端存储（高位字节在低地址），需要将 unsigned int i = 0x00646c72替换成0x00726c64; 不需要将`57616`更改，因为57616 的十六进制是 E110，无论端序。

7. 在下面的代码中，“`y=`”之后将打印什么(注：答案不是一个特定的值）？为什么会发生这种情况？

答：输出的是一个受调用前的代码影响的“随机”的值。因为 printf 尝试读的参数数量比提供的参数 数量多。 第1个参数 3 通过 a1 传递，而第2个参数对应的寄存器 a2 在调用前不会被设置为 任何具体的值，而是会 包含调用发生前的任何已经在里面的值。